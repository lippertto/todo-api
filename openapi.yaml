openapi: "3.0.3"
info:
  description: "This is the Code Intelligence Todo-API"
  version: "1.0.0"
  title: "Todo-API"
  contact:
    email: "tobias.lippert@fastmail.com"
servers:
  - url: http://localhost:8080/v1
    description: Development server
tags:
  - name: "todos"
    description: "Everything about todos"
  - name: "tasks"
    description: "Access to the tasks of a todo"
paths:
  /todos:
    post:
      tags:
        - "todos"
      summary: "Add a new todo"
      requestBody:
        "content":
          "application/json":
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "201":
          description: "Successful creation"
          content:
            "application/json":
              schema: { $ref: "#/components/schemas/Todo" }
        "400": { $ref: "#/components/responses/BadRequest" }
  /todos/{todoId}:
    parameters:
      - { $ref: "#/components/parameters/TodoId" }
    get:
      tags:
        - "todos"
      summary: "Get an individual todo by id"
      responses:
        "200": {$ref: "#/components/responses/TodoOk"}
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [ "todos" ]
      summary: "Update an existing todo"
      requestBody:
        "content":
          "application/json":
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "200": {$ref: "#/components/responses/TodoOk"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [ "todos" ]
      summary: "Delete a todo"
      responses:
        "200": { $ref: "#/components/responses/Ok" }
        "404": { $ref: "#/components/responses/NotFound" }


  /todos/{todoId}/tasks:
    parameters:
      - { $ref: "#/components/parameters/TodoId" }
    post:
      tags: [ "tasks" ]
      requestBody:
        content:
          "application/json":
            schema: { $ref: "#/components/schemas/Task" }
      responses:
        "201":
          description: "Task was created"
          content:
            "application/json":
              schema: { $ref: "#/components/schemas/Task" }
        "404": { $ref: "#/components/responses/NotFound" }

  /todos/{todoId}/tasks/{taskId}:
    parameters:
      - { $ref: "#/components/parameters/TodoId" }
      - { $ref: "#/components/parameters/TaskId" }
    get:
      tags: [ "tasks" ]
      responses:
        "200": { $ref: "#/components/responses/TaskOk" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [ "tasks" ]
      summary: "Update an existing task"
      requestBody:
        "content":
          "application/json":
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "200": { $ref: "#/components/responses/TaskOk" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [ "tasks" ]
      summary: "Delete a task"
      responses:
        "200": { $ref: "#/components/responses/Ok" }
        "404": { $ref: "#/components/responses/NotFound" }

components:
  schemas:
    TodoId:
      type: "string"
    TaskId:
      type: "string"
    Error:
      type: "object"
      properties:
        "error":
          type: "object"
          properties:
            "code":
              type: "string"
            "message":
              type: "string"
            "details":
              type: "string"
              nullable: true
    Todo:
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
        description:
          type: "string"
        tasks:
          type: "array"
          items:
            $ref: "#/components/schemas/Task"
          default:
            [ ]
          readOnly: true
    Task:
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
  responses:
    Ok:
      description: "Ok"
    BadRequest:
      description: "Bad payload"
      content:
        "application/json":
          schema: { $ref: "#/components/schemas/Error" }
    NotFound:
      description: "Not found"
      content:
        "application/json":
          schema: { $ref: "#/components/schemas/Error" }
    TodoOk:
      description: "ok"
      content:
        "application/json":
          schema: { $ref: "#/components/schemas/Todo" }
    TaskOk:
      description: "ok"
      content:
        "application/json":
          schema: { $ref: "#/components/schemas/Task" }
  parameters:
    "TodoId":
      name: "todoId"
      in: "path"
      description: "ID of todo to return"
      required: true
      schema: { $ref: "#/components/schemas/TodoId" }
    "TaskId":
      name: "taskId"
      in: "path"
      description: "ID of the task"
      required: true
      schema: { $ref: "#/components/schemas/TaskId" }
